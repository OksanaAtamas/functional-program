 #lang racket
;****************** РЕКУРСІЯ *************************
; приклади до презентації Лек3. Ітераційні та рекурсивні процеси
;======================теорія =========================

;===================================================================
;      Ex3 / приклад рекурсивного обчислення факторіалу числа
;===================================================================
      
(define (factorial n);  факторіaл числа - рекурсія
      (if (= n 0)
         1
         (* n (factorial (- n 1)))))

(factorial 5) ;call procedure
;========================================================================
;     Ex4 / ітеративний процес розрахунку факторіaлу числа
;========================================================================
(define (factoriall n)
     (fact-iter 1 1 n))

;ітеративна процедура обчислення факторіaлу числа через множення чисел від 1 до max-count
;product -результат множення 
;counter - лічильник чисел
;max-count- число, факторіал якого обчислюється
(define (fact-iter product  counter  max-count)
       (if (> counter  max-count)
           product 
           (fact-iter (* counter  product)
                     (+ counter 1)
                     max-count)))

(factoriall 5) ;call procedure

;============================================================================
;      Ex5 рекурсія для розрахунку числа Фібоначчі на заданій позиції
;============================================================================
(define (fib n) ;знайти число Фібоначчі на позиції n 
     (cond ((= n 0) 0)
          ((= n 1) 1)
            (else (+ (fib (- n 1))
                     (fib (- n 2))
                   )
             )
      )
  )
(fib 10);call procedure
;========================================================================
;       Ex6 ітерація для розрахунку числа Фібоначчі на заданій позиції
;========================================================================
(define (fibonachi n);знайти число Фібоначчі на позиції n 
     (fib-iter 1  0  n))

(define (fib-iter a  b  count)
    (if (= count 0)
          b ; 0
         (fib-iter (+ a  b)  a  (- count 1))
         )
  )

(fibonachi 10) ;call procedure

;=======================================================================
;        Ex7 рекурсія зведення числа в степінь
;=======================================================================
(define (expta  b  n);зведення числа b  у степінь n
       (if (= n  0)
           1     ;число в нульовому степені = одиниці 
           (* b (expta  b  (-  n  1)))))
(expta 2 5) ;call procedure

;========================================================================
;      Ex8 - ітерація для зведення числа в степінь
;===================================================================
(define (exponenta  b  n)    ;зведення числа b  у степінь n
     (expt-iter  b  n  1))

; ітеративне зведення числа b  у степінь counter
;  product - результат, що повертається як число у степені
(define (expt-iter  b  counter product) 
       (if (= counter 0)
             product ; результат множення 
            (expt-iter  b (- counter 1) (* b product)))
  )

(exponenta 2 5)  ;call procedure

;================================================================
;      Ex9 зведення числа у степінь з використанням предикату
;      перевірки степеню на парність 
;================================================================
(define (fast-expt b n)
       (cond ((= n 0) 1)
              ( (even-number? n) (square (fast-expt b (/ n 2))))
               (else (* b (fast-expt b (- n 1))))))

(define (even-number? n)  ; предикат перевірки числа на парність
      (= (remainder n 2) 0))

(define (square x) ; процедура визначення квадрата числа
  (* x x))

(fast-expt 2 5) ; виклик процедури

;=====================================================
;     Ex10 найбільший спільний дільник двох чисел
;====================================================
(define (nod a b)
     (if (= b 0); якщо друге число = 0
         a      ; результат - перше число
         (nod b (remainder a b))));  інакше реалізація алгоритму Евкліду

(display "student XXX, gr YYY")
(newline)
(display "NOD(206 40)=")
(nod 206 40)

;===================================================
;     Ex11 знaйти суму чисел в діапазоні a, b 
;=================================================
 (define (sum-integers a b); 
  (if (> a b)
        0
        (+ a (sum-integers (+ a 1) b))))

(display "sum(1..10)=")
(sum-integers 1 10) ;call procedure
;==================================================
; Ex12 визначити суму кубів чисел в діапазоні а, b
;==================================================
(define (sum-cubes a b)
     (if (> a b)
        0
        (+ (cube a) (sum-cubes (+ a 1) b))))

(define (cube x)         ; порядок визначення вкладенної 
                         ; функції - несуттєвий
    ( * x (* x x)))

(display "sum-cubes(1..3)=")
(sum-cubes 1 3); call procedure

;==============================================
; Ex13 рекурсивне обчислення числа пі
; через ряд Лейбница: 1/(1*3)+1/(5*7)+1/(9*11)+…., 
; який повільно збігається до пі/8
;==============================================
(define (pi a b)
     (if (> a b)
       0
       (+ (/ 1.0 (* a (+ a 2)))
          (pi (+ a 4) b))))

(display "example13 -  pi = ")
(* 8 (pi 1 10000000))     ; call procedure, 100000 - кількість членів ряду
